
---
params:
  XLEN: 32

  # name of the configuration
  NAME: qc_iu

  # vendor-specific architecture ID in marchid
  ARCH_ID: 0x1000000000000000

  # vendor-specific implementation ID in mimpid
  IMP_ID: 0x0

  # JEDEC Vendor ID bank (Qualcomm = 0)
  VENDOR_ID_BANK: 0x0

  # JEDEC Vendor ID offset (Qualcomm = 0x70)
  VENDOR_ID_OFFSET: 0x70

  # whether or not the implementation supports misaligned loads and stores in main memory (not including atomics)
  # must be true when Zicclsm is supported
  MISALIGNED_LDST: false

  TIME_CSR_IMPLEMENTED: true

  # whether or not the implementation supports misaligned atomics
  # MISALIGNED_AMO: false

  HPM_COUNTER_EN:
  - false # CY - must be false
  - false # TM - must be false
  - false # IR - must be false
  - true  # HPM3 implemented
  - false # HPME4
  - false # HPME5
  - false # HPME6
  - false # HPME7
  - false # HPME8
  - false # HPME9
  - false # HPME10
  - false # HPME11
  - false # HPME12
  - false # HPME13
  - false # HPME14
  - false # HPME15
  - false # HPME16
  - false # HPME17
  - false # HPME18
  - false # HPME19
  - false # HPME20
  - false # HPME21
  - false # HPME22
  - false # HPME23
  - false # HPME24
  - false # HPME25
  - false # HPME26
  - false # HPME27
  - false # HPME28
  - false # HPME29
  - false # HPME30
  - false # HPME31

  HPM_EVENTS: [1] # defined HPM event numbers

  # Indicates which counters can be disabled from mcountinhibit
  #
  # An unimplemented counter cannot be specified, i.e., if
  # NUM_HPM_COUNTERS == 8, it would be illegal to add index
  # 11 in COUNTINHIBIT_EN since the highest implemented counter
  # would be at bit 10
  COUNTINHIBIT_EN:
  - true  # CY
  - false # empty
  - true  # IR
  - false # HPME3
  - false # HPME4
  - false # HPME5
  - false # HPME6
  - false # HPME7
  - false # HPME8
  - false # HPME9
  - false # HPME10
  - false # HPME11
  - false # HPME12
  - false # HPME13
  - false # HPME14
  - false # HPME15
  - false # HPME16
  - false # HPME17
  - false # HPME18
  - false # HPME19
  - false # HPME20
  - false # HPME21
  - false # HPME22
  - false # HPME23
  - false # HPME24
  - false # HPME25
  - false # HPME26
  - false # HPME27
  - false # HPME28
  - false # HPME29
  - false # HPME30
  - false # HPME31

  MISALIGNED_SPLIT_STRATEGY: by_byte

  # Indicates which counters can delegated via mcounteren
  #
  # An unimplemented counter cannot be specified, i.e., if
  # NUM_HPM_COUNTERS == 8, it would be illegal to add index
  # 11 in COUNTEN_EN since the highest implemented counter
  # would be at bit 10
  MCOUNTENABLE_EN:
  - true  # CY
  - false # empty
  - true  # IR
  - false # HPME3
  - false # HPME4
  - false # HPME5
  - false # HPME6
  - false # HPME7
  - false # HPME8
  - false # HPME9
  - false # HPME10
  - false # HPME11
  - false # HPME12
  - false # HPME13
  - false # HPME14
  - false # HPME15
  - false # HPME16
  - false # HPME17
  - false # HPME18
  - false # HPME19
  - false # HPME20
  - false # HPME21
  - false # HPME22
  - false # HPME23
  - false # HPME24
  - false # HPME25
  - false # HPME26
  - false # HPME27
  - false # HPME28
  - false # HPME29
  - false # HPME30
  - false # HPME31

  # when true, writing an illegal value to a WLRL CSR field raises an Illegal Instruction exception
  # when false, writing an illegal value to a WLRL CSR field is ignored
  TRAP_ON_ILLEGAL_WLRL: true
  TRAP_ON_UNIMPLEMENTED_INSTRUCTION: true
  TRAP_ON_RESERVED_INSTRUCTION: true
  TRAP_ON_UNIMPLEMENTED_CSR: true

  MISA_CSR_IMPLEMENTED: true
  MTVEC_MODES: [0,1]

  # when true, *tval is written with the virtual PC of the EBREAK instruction (same information as *epc)
  # when false, *tval is written with 0 on an EBREAK instruction
  #
  # regardless, *tval is always written with a virtual PC when an external breakpoint is generated
  REPORT_VA_IN_MTVAL_ON_BREAKPOINT: true

  REPORT_VA_IN_MTVAL_ON_LOAD_MISALIGNED: true
  REPORT_VA_IN_MTVAL_ON_STORE_AMO_MISALIGNED: true
  REPORT_VA_IN_MTVAL_ON_INSTRUCTION_MISALIGNED: true
  REPORT_VA_IN_MTVAL_ON_LOAD_ACCESS_FAULT: true
  REPORT_VA_IN_MTVAL_ON_STORE_AMO_ACCESS_FAULT: true
  REPORT_VA_IN_MTVAL_ON_INSTRUCTION_ACCESS_FAULT: true
  REPORT_VA_IN_MTVAL_ON_LOAD_PAGE_FAULT: true
  REPORT_VA_IN_MTVAL_ON_STORE_AMO_PAGE_FAULT: true
  REPORT_VA_IN_MTVAL_ON_INSTRUCTION_PAGE_FAULT: true
  REPORT_ENCODING_IN_MTVAL_ON_ILLEGAL_INSTRUCTION: true
  MTVAL_WIDTH: 64 # must check that this can hold any valid VA if any REPORT_VA* or Sdext, and, if REPORT_ENCODING*, at least [MXLEN, ILEN].min bits

  # address of the unified discovery configuration data structure
  # this address is reported in the mconfigptr CSR
  CONFIG_PTR_ADDRESS: 0x1000

  # number of implemented PMP entries. Can be any value between 0-64, inclusive.
  #
  # the number of implemented PMP registers must be 0, 16, or 64.
  #
  # Therefore, whether or not a pmpaddrN or pmpcfgN register exists depends on
  # NUM_PMP_ENTRIES as follows:
  # |===
  # | NUM_PMP_ENTRIES | pmpaddr<0-15> / pmpcfg<0-3> | pmpaddr<16-63> / pmpcfg<4-15>
  # | 0               | N                           | N
  # | 1-16            | Y                           | N
  # | 17-64           | Y                           | Y
  # |===
  # ** pmpcfgN for an odd N never exist when XLEN == 64
  #
  # when NUM_PMP_ENTRIES is not exactly 0, 16, or 64, some extant pmp registers,
  # and associated pmpNcfg, will be read-only zero (but will not cause an exception).
  NUM_PMP_ENTRIES: 0

  # log2 of the smallest supported PMP region
  # generally, for systems with an MMU, should not be smaller than 12,
  # as that would preclude caching PMP results in the TLB along with
  # virtual memory translations
  #
  # Note that PMP_GRANULARITY is equal to G+2 (not G) as described in
  # the privileged architecture
  PMP_GRANULARITY: 12

  # log2 of the smallest supported PMA region
  # generally, for systems with an MMU, should not be smaller than 12,
  # as that would preclude caching PMP results in the TLB along with
  # virtual memory translations
  PMA_GRANULARITY: 12

  # number of bits in the physical address space
  PHYS_ADDR_WIDTH: 34

  # when the A extension is supported, indicates whether or not
  # the extension can be disabled in the `misa.A` bit.
  # MUTABLE_MISA_A: false

  # when the B extension is supported, indicates whether or not
  # the extension can be disabled in the `misa.B` bit.
  MUTABLE_MISA_B: false

  # when the M extension is supported, indicates whether or not
  # the extension can be disabled in the `misa.M` bit.
  MUTABLE_MISA_M: false

  # when the C extension is supported, indicates whether or not
  # the extension can be disabled in the `misa.C` bit.
  # MUTABLE_MISA_C: false

  # size of a cache block, in bytes
  # CACHE_BLOCK_SIZE: 64

  # Endianess of data in M-mode. Can be one of:
  #
  #  * 0: M-mode data is always little endian
  #  * 1: M-mode data is always big endian
  #  * 2: M-mode data can be either little or big endian, depending on the RW CSR field mstatus.MBE
  M_MODE_ENDIANESS: little

  MISALIGNED_LDST_EXCEPTION_PRIORITY: low
  MISALIGNED_MAX_ATOMICITY_GRANULE_SIZE: 0
